<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = global.playerDatabase[# 0, pid];
y = global.playerDatabase[# 1, pid];
image_angle = global.playerDatabase[# 2, pid];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objExplosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if ds_list_find_index( other.targetList, id) = -1{
    ds_list_add( other.targetList, id);
    global.playerDatabase[# 5, pid] -= 50;
 
    for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
       
       buffer_seek( global.buffer, buffer_seek_start, 0);
                buffer_write( global.buffer, buffer_u8, 8);;
                buffer_write( global.buffer, buffer_u8, pid);
                buffer_write( global.buffer, buffer_s8, global.playerDatabase[# 5, pid]  );
       network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );

        if global.playerDatabase[# 5, pid] &lt;= 0{
        
        global.playerDatabase[# 5, pid] = 100;
        global.playerDatabase[# 0, pid] = 0;
        global.playerDatabase[# 1, pid] = 0;
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
               
               buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 8);;
                        buffer_write( global.buffer, buffer_u8, pid);
                        buffer_write( global.buffer, buffer_s8, global.playerDatabase[# 5, pid]  );
               network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
            
                 buffer_seek( global.buffer, buffer_seek_start, 0);
                    buffer_write( global.buffer, buffer_u8, 1);
                    buffer_write( global.buffer, buffer_u8, pid);
                    buffer_write( global.buffer, buffer_s16, global.playerDatabase[# 0, pid]  );
                    buffer_write( global.buffer, buffer_s16, global.playerDatabase[# 1, pid]  );
                network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                        
            }
            
        }
        
    }

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.pid != pid{
    global.playerDatabase[# 5, pid] -= 10;
 
    for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
       
       buffer_seek( global.buffer, buffer_seek_start, 0);
                buffer_write( global.buffer, buffer_u8, 8);;
                buffer_write( global.buffer, buffer_u8, pid);
                buffer_write( global.buffer, buffer_s8, global.playerDatabase[# 5, pid]  );
       network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );

       buffer_seek( global.buffer, buffer_seek_start, 0);
                buffer_write( global.buffer, buffer_u8, 9);;
                buffer_write( global.buffer, buffer_s16, other.bid);
       network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
     
                                             
    }
    
instance_destroy( other );
    
}

if global.playerDatabase[# 5, pid] &lt;= 0{

global.playerDatabase[# 5, pid] = 100;
global.playerDatabase[# 0, pid] = 0;
global.playerDatabase[# 1, pid] = 0;
    for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
       
       buffer_seek( global.buffer, buffer_seek_start, 0);
                buffer_write( global.buffer, buffer_u8, 8);;
                buffer_write( global.buffer, buffer_u8, pid);
                buffer_write( global.buffer, buffer_s8, global.playerDatabase[# 5, pid]  );
       network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
    
         buffer_seek( global.buffer, buffer_seek_start, 0);
            buffer_write( global.buffer, buffer_u8, 1);
            buffer_write( global.buffer, buffer_u8, pid);
            buffer_write( global.buffer, buffer_s16, global.playerDatabase[# 0, pid]  );
            buffer_write( global.buffer, buffer_s16, global.playerDatabase[# 1, pid]  );
        network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

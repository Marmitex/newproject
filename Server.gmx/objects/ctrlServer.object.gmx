<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init();
countBullet = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if async_load[? "type"] = network_type_data{

    var buff = async_load[? "buffer"];
    var sockid = async_load[? "id"];
    var messid = buffer_read( buff, buffer_u8);
    
    switch(messid){
        case 0:
            if ds_list_find_index( global.playerList, sockid) = -1{
                global.playerDatabase[# 5, sockid] = 100; 
                ds_list_add( global.playerList, sockid);
                var o = instance_create( x, y, objPlayer);
                (o).pid = sockid;
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 0);
                        buffer_write( global.buffer, buffer_u8, sockid);
                    network_send_packet( sockid, global.buffer, buffer_get_size( global.buffer) );
                                  
            }
        
        break;

        
        
        
        case 1:
            var xx = buffer_read( buff, buffer_s16);
            var yy = buffer_read( buff, buffer_s16);
            global.playerDatabase[# 0, sockid] = xx;    
            global.playerDatabase[# 1, sockid] = yy;  
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
                if global.playerList[| i-1] != sockid{
                
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 1);
                        buffer_write( global.buffer, buffer_u8, sockid);
                        buffer_write( global.buffer, buffer_s16, xx);
                        buffer_write( global.buffer, buffer_s16, yy);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                    
                }                               
            }
        
        break;

        
        
        
        case 2:
            var aa = buffer_read( buff, buffer_s16);
            global.playerDatabase[# 2, sockid] = aa;              
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
                if global.playerList[| i-1] != sockid{
                
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 2);;
                        buffer_write( global.buffer, buffer_u8, sockid);
                        buffer_write( global.buffer, buffer_s16, aa);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                    
                }                               
            }
        
        break;
        
        
        
        
        case 3:
            var cid = buffer_read( buff, buffer_u8);
  
            if global.cannonDatabase[# 0,cid] = false{
                global.playerDatabase[# 4, sockid] = cid;               
                global.cannonDatabase[# 0, cid] = true;
                     
                for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
                   
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 3);;
                        buffer_write( global.buffer, buffer_u8, sockid);
                        buffer_write( global.buffer, buffer_u8, cid);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                
                }
                
            }
            
        break;    

        
     
           
        case 4:
            var aa = buffer_read( buff, buffer_s16);
            var cid = global.playerDatabase[# 4, sockid];
            global.cannonDatabase[# 1,cid] = aa;
                     
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
               
                if global.playerList[| i-1] != sockid{
                
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 4);;
                        buffer_write( global.buffer, buffer_u8, cid);
                        buffer_write( global.buffer, buffer_s16, aa);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                    
                }                            
            }

            
        break;    
        
        
        
        
       case 5:
            var cid = buffer_read( buff, buffer_u8)
            if global.cannonDatabase[# 0,cid] = true{
            
                global.cannonDatabase[# 0,cid] = false;
                     
                for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
                   
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 5);;
                        buffer_write( global.buffer, buffer_u8, sockid);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                
                }
                
            }
            
        break;  
        
        

        
       case 6:
            var cid = global.playerDatabase[# 4, sockid];
                     
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){
               
                buffer_seek( global.buffer, buffer_seek_start, 0);
                    buffer_write( global.buffer, buffer_u8, 6);;
                    buffer_write( global.buffer, buffer_u8, cid);
                    buffer_write( global.buffer, buffer_s16, global.cannonDatabase[# 1,cid]);
                network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                            
            }
                
            
        break;
        
        
        
        
        
       case 7:
            
            var xx = buffer_read( buff, buffer_s16);
            var yy = buffer_read( buff, buffer_s16);
            var aa = buffer_read( buff, buffer_s16); 
            var o = instance_create( xx, yy, objBullet);
            (o).bid = countBullet;
            (o).direction = aa;
            (o).speed = 20;
            (o).pid = sockid;
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){

                
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 7);;
                        buffer_write( global.buffer, buffer_u8, sockid);
                        buffer_write( global.buffer, buffer_s16, countBullet);
                        buffer_write( global.buffer, buffer_s16, xx);
                        buffer_write( global.buffer, buffer_s16, yy);
                        buffer_write( global.buffer, buffer_s16, aa);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                                
            }
                
            countBullet++;
            
        break;

        
        
        
       case 8:
            
            var tmpid = buffer_read( buff, buffer_u8);
             
     
            buffer_seek( global.buffer, buffer_seek_start, 0);
                buffer_write( global.buffer, buffer_u8, 8);;
                buffer_write( global.buffer, buffer_u8, tmpid);
                buffer_write( global.buffer, buffer_s8, global.playerDatabase[# 5, tmpid]  );
            network_send_packet( sockid, global.buffer, buffer_get_size( global.buffer) );

                
            
        break; 
        
        
        
        
        
       case 10:
            
            var xx = buffer_read( buff, buffer_s16);
            var yy = buffer_read( buff, buffer_s16);
            var aa = buffer_read( buff, buffer_s16); 
            var pp = buffer_read( buff, buffer_s16);    
            var o = instance_create( xx, yy, objBomb);
            (o).bid = countBullet;
            (o).direction = aa;
            (o).speed = 20*(pp/100);
            (o).pid = sockid;
            for( var i = 1; i &lt;= ds_list_size( global.playerList ); i++){

                
                    buffer_seek( global.buffer, buffer_seek_start, 0);
                        buffer_write( global.buffer, buffer_u8, 10);;
                        buffer_write( global.buffer, buffer_u8, sockid);
                        buffer_write( global.buffer, buffer_s16, countBullet);
                        buffer_write( global.buffer, buffer_s16, xx);
                        buffer_write( global.buffer, buffer_s16, yy);
                        buffer_write( global.buffer, buffer_s16, aa);
                        buffer_write( global.buffer, buffer_s16, pp);
                    network_send_packet( global.playerList[| i-1], global.buffer, buffer_get_size( global.buffer) );
                                                                
            }
                
            countBullet++;
            
        break;
        
                      
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
